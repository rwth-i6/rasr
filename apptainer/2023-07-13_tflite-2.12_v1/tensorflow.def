Bootstrap: library
From: ubuntu:22.04
Stage: tensorflow

%post
    echo "deb http://us.archive.ubuntu.com/ubuntu jammy universe" >> /etc/apt/sources.list
    apt update -y
    apt upgrade -y

    apt install -y gcc g++ make liblapack-dev pkg-config git wget python2 python3 python3-dev python3-numpy libssl-dev xz-utils

    update-alternatives --install /usr/bin/python python /usr/bin/python3.10 1

    #CMake
    version=3.25
    build=1
    cmake_dir=$(mktemp -d)
    cd $cmake_dir
    wget https://cmake.org/files/v$version/cmake-$version.$build.tar.gz
    tar -xzvf cmake-$version.$build.tar.gz
    cd cmake-$version.$build/
    ./bootstrap
    make -j$(nproc)
    make install
    cd /opt
    rm -rf $cmake_dir

    mkdir -p /opt/cuda/
    cd /opt/cuda

    wget https://developer.download.nvidia.com/compute/cuda/11.8.0/local_installers/cuda_11.8.0_520.61.05_linux.run
    wget https://developer.download.nvidia.com/compute/redist/cudnn/v8.6.0/local_installers/11.8/cudnn-linux-x86_64-8.6.0.163_cuda11-archive.tar.xz

    sh cuda_11.8.0_520.61.05_linux.run --no-drm --silent --toolkit
    tar xvf cudnn-linux-x86_64-8.6.0.163_cuda11-archive.tar.xz -C /usr/local/

    mv /usr/local/cudnn-linux-x86_64-8.6.0.163_cuda11-archive/lib /usr/local/cuda/
    mv /usr/local/cudnn-linux-x86_64-8.6.0.163_cuda11-archive/include/* /usr/local/cuda/include/

    wget -O /usr/bin/bazel https://github.com/bazelbuild/bazel/releases/download/5.3.0/bazel-5.3.0-linux-x86_64
    chmod +x /usr/bin/bazel

    mkdir -p /opt/tensorflow/
    cd /opt/tensorflow/

    wget https://github.com/tensorflow/tensorflow/archive/v2.12.0.tar.gz
    tar xzvf v2.12.0.tar.gz
    mv tensorflow-2.12.0 tensorflow

    cat << EOF > /opt/tensorflow/tensorflow/.tf_configure.bazelrc
build --action_env PYTHON_BIN_PATH="/usr/bin/python3"
build --python_path="/usr/bin/python3"
build --action_env USE_DEFAULT_PYTHON_LIB_PATH=1
build --define with_xla_support=true
build --define no_aws_support=true
build --define no_hdfs_support=true
build --define framework_shared_object=true
build --action_env TF_NEED_OPENCL_SYCL="0"
build --action_env TF_NEED_ROCM="0"
build --action_env TF_NEED_MKL="1"
build --action_env TF_DOWNLOAD_CLANG="0"
build:v2 --define=tf_api_version=2
build --action_env TF_NEED_CUDA="1"
build --action_env CUDA_TOOLKIT_PATH="/usr/local/cuda-11.8"
build --action_env TF_CUDA_COMPUTE_CAPABILITIES="3.5,7.0"
build --action_env LD_LIBRARY_PATH="/.singularity.d/libs"
build --action_env GCC_HOST_COMPILER_PATH="/usr/bin/x86_64-linux-gnu-gcc-11"
build --config=cuda
build:opt --copt=-Wno-sign-compare
build:opt --host_copt=-Wno-sign-compare
build:opt --host_copt=-march=core-avx2
build:opt --define with_default_optimizations=true
test --flaky_test_attempts=3
test --test_size_filters=small,medium
test --test_env=LD_LIBRARY_PATH
test:v1 --test_tag_filters=-benchmark-test,-no_oss,-no_gpu,-oss_serial
test:v1 --build_tag_filters=-benchmark-test,-no_oss,-no_gpu
test:v2 --test_tag_filters=-benchmark-test,-no_oss,-no_gpu,-oss_serial,-v1only
test:v2 --build_tag_filters=-benchmark-test,-no_oss,-no_gpu,-v1only
EOF

    mkdir -p /opt/tensorflow/bazel_out/
    cd /opt/tensorflow/tensorflow
    bazel --output_base=/opt/tensorflow/bazel_out build --config=opt --config=nogcp //tensorflow:libtensorflow_cc.so //tensorflow:libtensorflow.so //tensorflow/lite:libtensorflowlite.so

        mkdir tflite_build
    cd tflite_build
    cmake ../tensorflow/lite
    cmake --build . -j$(nproc)
    cp -r ../bazel-out/k8-opt/bin lib

    #Cleanup
    rm -rf /opt/cuda
    rm -rf /opt/tensorflow/v2.12.0.tar.gz
    find /opt/tensorflow/tensorflow/bazel-out/ -name "*.o" -exec rm {} \;
    find /opt/tensorflow/tensorflow/bazel-out/ -name "*.lo" -exec rm {} \;
    find /opt/tensorflow/tensorflow/bazel-out/ -name "*.a" -exec rm {} \;
