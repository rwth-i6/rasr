#!rnn.py

AttNumHeads = 1
EncValuePerHeadDim = 2048
accum_grad_multiple_step = 1
adam = True
batch_size = 10000
batching = 'random'
cache_size = '0'
cleanup_old_models = True
cleanup_old_models  = {'keep': [80, 100, 160, 170, 180, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200]}
debug_mode = False
debug_print_layer_output_template = True
extern_data = {'bpe': {'dim': 534, 'shape': (None,), 'sparse': True}, 'data': {'dim': 40, 'shape': (None, 40)}}
gradient_clip = 0
gradient_noise = 0.0
import_model_train_epoch1 = '/u/zeineldeen/setups/switchboard/2021-04-17--long-train/work/crnn/training/CRNNTrainingJob.oqHb2Ao1eBvh/output/models/epoch.160'
learning_rate = 0.001
learning_rate_control = 'newbob_multi_epoch'
learning_rate_control_min_num_epochs_per_new_lr = 3
learning_rate_control_relative_error_relative_lr = True
learning_rate_file = 'learning_rates'
log = ['./crnn.log']
log_batch_size = True
log_verbosity = 5
max_seqs = 200
min_learning_rate = 2e-05
model = '/u/zeineldeen/setups/switchboard/2021-04-17--long-train/work/crnn/training/CRNNTrainingJob.5mxqvnz6Xnx6/output/models/epoch'
multiprocessing = True
network = { 'conv0': { 'L2': 0.0001,
             'activation': None,
             'class': 'conv',
             'filter_size': (3, 3),
             'from': 'source0',
             'n_out': 32,
             'padding': 'same',
             'with_bias': True},
  'conv0p': {'class': 'pool', 'from': 'conv0', 'mode': 'max', 'padding': 'same', 'pool_size': (1, 2), 'trainable': False},
  'conv1': { 'L2': 0.0001,
             'activation': None,
             'class': 'conv',
             'filter_size': (3, 3),
             'from': 'conv0p',
             'n_out': 32,
             'padding': 'same',
             'with_bias': True},
  'conv1p': {'class': 'pool', 'from': 'conv1', 'mode': 'max', 'padding': 'same', 'pool_size': (1, 2), 'trainable': False},
  'conv_merged': {'axes': 'static', 'class': 'merge_dims', 'from': 'conv1p'},
  'enc_ctx': {'L2': 0.0001, 'activation': None, 'class': 'linear', 'from': 'encoder', 'n_out': 1024, 'with_bias': True},
  'enc_value': {'axis': 'F', 'class': 'split_dims', 'dims': (1, 2048), 'from': 'encoder'},
  'encoder': {'class': 'copy', 'from': ['lstm5_fw', 'lstm5_bw']},
  'inv_fertility': {'activation': 'sigmoid', 'class': 'linear', 'from': 'encoder', 'n_out': 1, 'with_bias': False},
  'lstm0_bw': { 'L2': 0.0001,
                'class': 'rec',
                'direction': -1,
                'dropout': 0.3,
                'from': 'conv_merged',
                'n_out': 1024,
                'unit': 'nativelstm2',
                'unit_opts': {'rec_weight_dropout': 0.1}},
  'lstm0_fw': { 'L2': 0.0001,
                'class': 'rec',
                'direction': 1,
                'dropout': 0.3,
                'from': 'conv_merged',
                'n_out': 1024,
                'unit': 'nativelstm2',
                'unit_opts': {'rec_weight_dropout': 0.1}},
  'lstm0_pool': {'class': 'pool', 'from': ['lstm0_fw', 'lstm0_bw'], 'mode': 'max', 'padding': 'same', 'pool_size': (3,), 'trainable': False},
  'lstm1_bw': { 'L2': 0.0001,
                'class': 'rec',
                'direction': -1,
                'dropout': 0.3,
                'from': 'lstm0_pool',
                'n_out': 1024,
                'unit': 'nativelstm2',
                'unit_opts': {'rec_weight_dropout': 0.1}},
  'lstm1_fw': { 'L2': 0.0001,
                'class': 'rec',
                'direction': 1,
                'dropout': 0.3,
                'from': 'lstm0_pool',
                'n_out': 1024,
                'unit': 'nativelstm2',
                'unit_opts': {'rec_weight_dropout': 0.1}},
  'lstm1_pool': {'class': 'pool', 'from': ['lstm1_fw', 'lstm1_bw'], 'mode': 'max', 'padding': 'same', 'pool_size': (2,), 'trainable': False},
  'lstm2_bw': { 'L2': 0.0001,
                'class': 'rec',
                'direction': -1,
                'dropout': 0.3,
                'from': 'lstm1_pool',
                'n_out': 1024,
                'unit': 'nativelstm2',
                'unit_opts': {'rec_weight_dropout': 0.1}},
  'lstm2_fw': { 'L2': 0.0001,
                'class': 'rec',
                'direction': 1,
                'dropout': 0.3,
                'from': 'lstm1_pool',
                'n_out': 1024,
                'unit': 'nativelstm2',
                'unit_opts': {'rec_weight_dropout': 0.1}},
  'lstm2_pool': {'class': 'pool', 'from': ['lstm2_fw', 'lstm2_bw'], 'mode': 'max', 'padding': 'same', 'pool_size': (1,), 'trainable': False},
  'lstm3_bw': { 'L2': 0.0001,
                'class': 'rec',
                'direction': -1,
                'dropout': 0.3,
                'from': 'lstm2_pool',
                'n_out': 1024,
                'unit': 'nativelstm2',
                'unit_opts': {'rec_weight_dropout': 0.1}},
  'lstm3_fw': { 'L2': 0.0001,
                'class': 'rec',
                'direction': 1,
                'dropout': 0.3,
                'from': 'lstm2_pool',
                'n_out': 1024,
                'unit': 'nativelstm2',
                'unit_opts': {'rec_weight_dropout': 0.1}},
  'lstm3_pool': {'class': 'pool', 'from': ['lstm3_fw', 'lstm3_bw'], 'mode': 'max', 'padding': 'same', 'pool_size': (1,), 'trainable': False},
  'lstm4_bw': { 'L2': 0.0001,
                'class': 'rec',
                'direction': -1,
                'dropout': 0.3,
                'from': 'lstm3_pool',
                'n_out': 1024,
                'unit': 'nativelstm2',
                'unit_opts': {'rec_weight_dropout': 0.1}},
  'lstm4_fw': { 'L2': 0.0001,
                'class': 'rec',
                'direction': 1,
                'dropout': 0.3,
                'from': 'lstm3_pool',
                'n_out': 1024,
                'unit': 'nativelstm2',
                'unit_opts': {'rec_weight_dropout': 0.1}},
  'lstm4_pool': {'class': 'pool', 'from': ['lstm4_fw', 'lstm4_bw'], 'mode': 'max', 'padding': 'same', 'pool_size': (1,), 'trainable': False},
  'lstm5_bw': { 'L2': 0.0001,
                'class': 'rec',
                'direction': -1,
                'dropout': 0.3,
                'from': 'lstm4_pool',
                'n_out': 1024,
                'unit': 'nativelstm2',
                'unit_opts': {'rec_weight_dropout': 0.1}},
  'lstm5_fw': { 'L2': 0.0001,
                'class': 'rec',
                'direction': 1,
                'dropout': 0.3,
                'from': 'lstm4_pool',
                'n_out': 1024,
                'unit': 'nativelstm2',
                'unit_opts': {'rec_weight_dropout': 0.1}},
  'output': { 'class': 'rec',
              'from': [],
              'max_seq_len': "max_len_from('base:encoder')",
              'target': 'bpe',
              'unit': { 'accum_att_weights': { 'class': 'eval',
                                               'eval': 'source(0) + source(1) * source(2) * 0.5',
                                               'from': ['prev:accum_att_weights', 'att_weights', 'base:inv_fertility'],
                                               'out_type': {'dim': 1, 'shape': (None, 1)}},
                        'att': {'axes': 'except_batch', 'class': 'merge_dims', 'from': 'att0'},
                        'att0': {'base': 'base:enc_value', 'class': 'generic_attention', 'weights': 'att_weights'},
                        'att_weights': {'class': 'dropout', 'dropout': 0.1, 'dropout_noise_shape': {'*': None}, 'from': 'att_weights0'},
                        'att_weights0': {'class': 'softmax_over_spatial', 'from': 'energy'},
                        'end': {'class': 'compare', 'from': 'output', 'kind': 'equal', 'value': 0},
                        'energy': {'activation': None, 'class': 'linear', 'from': 'energy_tanh', 'n_out': 1, 'with_bias': False},
                        'energy_in': {'class': 'combine', 'from': ['base:enc_ctx', 'weight_feedback', 's_transformed'], 'kind': 'add', 'n_out': 1024},
                        'energy_tanh': {'activation': 'tanh', 'class': 'activation', 'from': 'energy_in'},
                        'output': {'beam_size': 12, 'class': 'choice', 'from': 'output_prob', 'initial_output': 0, 'target': 'bpe'},
                        'output_prob': { 'L2': 0.0001,
                                         'class': 'softmax',
                                         'dropout': 0.3,
                                         'from': 'readout',
                                         'loss': 'ce',
                                         'loss_opts': {'label_smoothing': 0.1},
                                         'target': 'bpe'},
                        'readout': {'class': 'reduce_out', 'from': 'readout_in', 'mode': 'max', 'num_pieces': 2},
                        'readout_in': { 'activation': None,
                                        'class': 'linear',
                                        'from': ['s', 'prev:target_embed0', 'att'],
                                        'n_out': 1000,
                                        'with_bias': True},
                        's': { 'class': 'rnn_cell',
                               'from': ['prev:target_embed0', 'prev:att'],
                               'n_out': 1000,
                               'unit': 'zoneoutlstm',
                               'unit_opts': {'zoneout_factor_cell': 0.15, 'zoneout_factor_output': 0.05}},
                        's_transformed': {'activation': None, 'class': 'linear', 'from': 's', 'n_out': 1024, 'with_bias': False},
                        'target_embed': { 'activation': None,
                                          'class': 'linear',
                                          'from': 'output',
                                          'initial_output': 0,
                                          'n_out': 621,
                                          'with_bias': False},
                        'target_embed0': {'class': 'dropout', 'dropout': 0.05, 'dropout_noise_shape': {'*': None}, 'from': 'target_embed'},
                        'weight_feedback': { 'activation': None,
                                             'class': 'linear',
                                             'from': 'prev:accum_att_weights',
                                             'n_out': 1024,
                                             'with_bias': False}}},
  'source0': {'axis': 'F', 'class': 'split_dims', 'dims': (-1, 1), 'from': 'data'}}
newbob_learning_rate_decay = 0.9
newbob_multi_num_epochs = 6
newbob_multi_update_interval = 1
num_epochs = 200
optimizer_epsilon = 1e-08
save_interval = 1
search_output_layer = 'decision'
target = 'bpe'
task = 'train'
tf_log_memory_usage = True
truncation = -1
update_on_device = True
use_learning_rate_control_always = True
use_tensorflow = True
window = 1
config = {}

locals().update(**config)


