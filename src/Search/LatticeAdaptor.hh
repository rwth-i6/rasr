/** Copyright 2020 RWTH Aachen University. All rights reserved.
 *
 *  Licensed under the RWTH ASR License (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.hltpr.rwth-aachen.de/rwth-asr/rwth-asr-license.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
#ifndef SEARCH_LATTICEADAPTOR_HH
#define SEARCH_LATTICEADAPTOR_HH

#include <Lattice/Lattice.hh>

namespace Search {

class LatticeHandler;

/**
 * Basic interface for various types of lattices generated by the decoders.
 * The Lattice::WordLattice is used as default and fall-back format, all
 * derived classes are expected to be able to convert their lattice into
 * an Lattice::WordLattice.
 * I/O is handled by LatticeHandler.
 */
class LatticeAdaptor : public Core::ReferenceCounted {
public:
    virtual ~LatticeAdaptor() {}
    /**
     * dispatch to corresponding method in LatticeHandler
     */
    virtual bool write(const std::string& id, LatticeHandler* handler) const = 0;
    /**
     * dispatch to corresponding method in LatticeHandler
     */
    virtual Lattice::ConstWordLatticeRef wordLattice(const LatticeHandler* handler) const = 0;
    /**
     * return false if an actual lattice is contained
     */
    virtual bool empty() const = 0;

protected:
    LatticeAdaptor() {}
};

}  // namespace Search

#endif  // SEARCH_LATTICEADAPTOR_HH
